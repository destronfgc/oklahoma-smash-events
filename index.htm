<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oklahoma Smash Tournaments</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anton&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Dark Theme (Default) */
            --bg-color: #1F2937;
            --card-bg-color: #111827;
            --header-bg-color: #111827;
            --text-color-primary: #F3F4F6;
            --text-color-secondary: #9CA3AF;
            --border-color: #374151;
            --accent-color: #4F46E5;
            --accent-color-hover: #4338CA;
            --active-tab-color: #818CF8;
        }

        .light-theme {
            /* Light Theme (Scissortail Sunset) */
            --bg-color: #FFF7ED;
            --card-bg-color: #FFFFFF;
            --header-bg-color: #FFFFFF;
            --text-color-primary: #1F2937;
            --text-color-secondary: #6B7280;
            --border-color: #E5E7EB;
            --accent-color: #D97706;
            --accent-color-hover: #B45309;
            --active-tab-color: #F59E0B;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color-primary);
            transition: background-color 0.3s, color 0.3s;
        }
        .font-anton {
            font-family: 'Anton', sans-serif;
        }
        
        /* Flipping Card Styles */
        .card-container {
            perspective: 1000px;
            min-height: 450px;
        }
        .tournament-card-flipper {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 0.7s;
            transform-style: preserve-3d;
            opacity: 0;
        }
        .card-container:hover .tournament-card-flipper {
            transform: rotateY(180deg);
        }
        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            background-color: var(--card-bg-color);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            transition: box-shadow 0.3s ease-in-out;
        }
        .card-container:hover .card-face {
             box-shadow: 0 0 20px rgba(79, 70, 229, 0.4);
        }
        .card-back {
            transform: rotateY(180deg);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 1rem;
        }
        .card-back h3 {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-color-primary);
        }
        .card-back p {
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--accent-color);
        }

        /* Other Styles */
        .ok-blue { background-color: var(--accent-color); }
        .ok-blue-hover:hover { background-color: var(--accent-color-hover); }
        .game-tab {
            cursor: pointer;
            padding: 12px;
            border-bottom: 3px solid transparent;
            transition: all 0.2s ease-in-out;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
        }
        .game-tab.active {
            color: var(--active-tab-color);
            border-bottom-color: var(--active-tab-color);
        }
        .game-tab:not(.active):hover {
            background-color: var(--border-color);
        }
        .ultimate-icon-glow {
            filter: drop-shadow(0 0 5px #ef4444);
        }
        .melee-icon-glow {
            filter: drop-shadow(0 0 6px #a78bfa);
        }
        .p-plus-icon {
             filter: drop-shadow(0 0 5px #00ff00);
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .card-enter-animation {
            animation: fadeInUp 0.5s ease-out forwards;
        }
        .loader {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 5px solid #374151;
            border-top-color: var(--accent-color);
            animation: spin 1s linear infinite;
            margin: 2rem auto;
        }
        @keyframes spin { to { transform: rotate(360deg); } }
        
        #back-to-top-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: none;
            transition: opacity 0.3s, transform 0.3s;
            opacity: 0;
            transform: translateY(10px);
        }
        #back-to-top-btn.show {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }
        .share-popover {
            position: absolute;
            bottom: 50px;
            right: 0;
            background-color: #1F2937;
            border: 1px solid #374151;
            border-radius: 8px;
            padding: 8px;
            display: flex;
            flex-direction: column;
            gap: 4px;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0,0,0,0.5);
            display: none; /* Hidden by default */
        }
    </style>
</head>
<body class="text-gray-200">

    <div class="container mx-auto px-4 py-8">
        <header class="text-center mb-6 py-8 bg-gray-900 rounded-xl shadow-lg relative">
            <h1 class="font-anton text-6xl font-bold text-indigo-500 tracking-wider">OKLAHOMA SMASH</h1>
            <p class="text-lg text-gray-400 mt-2 font-light">The official hub for OK Smash tournaments.</p>
            <button id="theme-toggle" class="absolute top-4 right-4 p-2 rounded-full bg-gray-800 hover:bg-gray-700 transition-colors"></button>
        </header>

        <div id="featured-tournament" class="mb-12"></div>

        <div id="game-tabs" class="flex flex-wrap justify-center items-center gap-4 mb-8 text-gray-400 border-b border-gray-700">
            <div class="game-tab active" data-game-id="1386" title="Ultimate"><img src="images/ultimate-logo.png" class="h-10 ultimate-icon-glow" alt="Ultimate Icon"></div>
            <div class="game-tab" data-game-id="1" title="Melee"><img src="images/melee-logo.png" class="h-10 melee-icon-glow" alt="Melee Icon"></div>
            <div class="game-tab" data-game-id="33602" title="P+"><img src="images/p-plus-logo.png" class="h-10 p-plus-icon" alt="P+ Icon"></div>
            <div class="game-tab" data-game-id="18070" title="Other Fighters">
                <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
            </div>
        </div>

        <div id="controls-container" class="mb-2 p-4 bg-gray-900 rounded-lg shadow-md flex flex-col md:flex-row gap-4 items-center justify-center"></div>
        <div id="stat-counter" class="text-center text-sm text-gray-400 mb-8"></div>
        <div id="loading" class="text-center"><div class="loader"></div></div>
        <div id="tournaments-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"></div>
        <div id="pagination-controls" class="flex justify-center items-center mt-12 gap-4"></div>
    </div>

    <footer class="text-center py-6 mt-12 bg-gray-900 rounded-lg shadow-md border-t border-gray-700"></footer>
    
    <button id="back-to-top-btn" class="p-3 rounded-full ok-blue ok-blue-hover text-white shadow-lg">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path></svg>
    </button>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const state = {
                apiKey: 'd962f418dd0489a80b44305d874f673d',
                currentPage: 1,
                totalPages: 1,
                activeGameId: 1386,
                tournaments: [],
                allFetchedTournaments: [],
                theme: localStorage.getItem('theme') || 'dark',
                searchTerm: '',
                activeCity: '',
                showPast: false,
                showWeeklies: false,
                debounceTimer: null,
                countdownInterval: null,
                featuredTournamentSlug: 'tournament/middle-of-nowhere' 
            };
            
            const graphqlQuery = `
                query TournamentsByState($perPage: Int!, $page: Int!, $filter: TournamentPageFilter, $sortBy: String) {
                  tournaments(query: { perPage: $perPage, page: $page, filter: $filter, sortBy: $sortBy }) {
                    pageInfo { totalPages page }
                    nodes {
                      id name slug startAt endAt city venueAddress registrationClosesAt
                      owner { id player { gamerTag } }
                      participants(query: {perPage: 1}) { pageInfo { total } }
                      images(type: "banner") { url }
                      events(filter: { videogameId: [$videogameId] }) {
                        id slug name
                        standings(query: { perPage: 1, page: 1 }) {
                          nodes {
                            placement
                            entrant {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
            `;

            const featuredQuery = `
                query TournamentQuery($slug: String) {
                  tournament(slug: $slug){
                    id name slug startAt endAt city venueAddress
                    images(type: "banner") { url }
                    events { id name }
                  }
                }
            `;
            
            const fetchTournaments = async (isFeatured = false) => {
                const loadingEl = document.getElementById('loading');
                const listEl = document.getElementById('tournaments-list');
                const paginationEl = document.getElementById('pagination-controls');
                
                if (!isFeatured) {
                    loadingEl.style.display = 'block';
                    listEl.innerHTML = '';
                    paginationEl.innerHTML = '';
                }

                const timestamp = Math.floor(Date.now() / 1000);
                let filter = {
                    addrState: "OK",
                    videogameIds: [state.activeGameId] 
                };

                let sortBy = 'startAt asc';

                if (!isFeatured) {
                    if (state.searchTerm) filter.name = state.searchTerm;
                    if (state.showWeeklies) filter.name = (filter.name ? filter.name + " " : "") + "Weekly";
                }
                
                if (state.showPast && !isFeatured) {
                    filter.beforeDate = timestamp;
                    sortBy = 'startAt desc';
                } else {
                    filter.afterDate = timestamp;
                }

                if (isFeatured) {
                    sortBy = 'attendeeCount desc';
                }

                const queryWithGameId = graphqlQuery.replace('$videogameId', state.activeGameId);
                const variables = {
                    perPage: isFeatured ? 1 : 100,
                    page: isFeatured ? 1 : state.currentPage,
                    filter: filter,
                    sortBy: sortBy
                };

                try {
                    const response = await fetch('https://api.start.gg/gql/alpha', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${state.apiKey}`,
                        },
                        body: JSON.stringify({ query: queryWithGameId, variables: variables }),
                    });

                    const data = await response.json();
                    if (!data || (!data.data && data.errors)) {
                         throw new Error(data.errors ? data.errors[0].message : 'Invalid API Response');
                    }
                    
                    if (isFeatured) {
                         if(data.data.tournaments && data.data.tournaments.nodes.length > 0) {
                            renderFeaturedTournament(data.data.tournaments.nodes[0]);
                         }
                         return;
                    } 
                    
                    let tournaments = data.data.tournaments.nodes;
                    state.allFetchedTournaments = tournaments;
                    applyClientFilters();

                } catch (err) {
                    console.error('Fetch error:', err);
                    if (!isFeatured) {
                        loadingEl.style.display = 'none';
                        listEl.innerHTML = `<p class="text-center col-span-full text-red-400">Error: ${err.message}</p>`;
                    }
                }
            };
            
            const fetchFeaturedTournament = async () => {
                try {
                    const response = await fetch('https://api.start.gg/gql/alpha', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${state.apiKey}`,
                        },
                        body: JSON.stringify({
                            query: featuredQuery,
                            variables: { slug: state.featuredTournamentSlug }
                        }),
                    });
                    const data = await response.json();
                    if (!data || (!data.data && data.errors)) {
                         throw new Error(data.errors ? data.errors[0].message : 'Invalid API Response for featured tournament');
                    }
                    if (data.data.tournament) {
                        renderFeaturedTournament(data.data.tournament);
                    }
                } catch (err) {
                    console.error("Featured fetch error:", err);
                    document.getElementById('featured-tournament').innerHTML = `<p class="text-center text-red-400">Could not load featured tournament.</p>`;
                }
            };
            
            const applyClientFilters = () => {
                const listEl = document.getElementById('tournaments-list');
                let tournaments = state.allFetchedTournaments;
                
                if (state.activeCity) {
                    tournaments = tournaments.filter(t => t.city === state.activeCity);
                }

                document.getElementById('loading').style.display = 'none';
                state.tournaments = tournaments;
                
                if (tournaments.length === 0) {
                    listEl.innerHTML = `<p class="text-center col-span-full text-gray-400">No tournaments found with the current filters.</p>`;
                } else {
                    renderTournaments();
                }
                updateStatCounter(tournaments.length, state.allFetchedTournaments.length);
                document.getElementById('pagination-controls').innerHTML = ''; // Pagination disabled with client-side filtering
            };

            const renderFeaturedTournament = (tournament) => {
                const featuredContainer = document.getElementById('featured-tournament');
                const imageUrl = tournament.images.length > 0 ? tournament.images[0].url : `https://placehold.co/1200x400/111827/4F46E5?text=Featured+Event`;
                const startDate = new Date(tournament.startAt * 1000);
                const formattedDate = startDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
                const eventsList = tournament.events.map(event => `<li class="text-gray-400">${event.name}</li>`).join('');

                featuredContainer.innerHTML = `
                    <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden border-2 border-indigo-500/50 grid md:grid-cols-2">
                        <div class="p-8 flex flex-col justify-between">
                            <div>
                                <div class="uppercase tracking-wide text-sm text-indigo-400 font-semibold">Featured Tournament</div>
                                <a href="https://start.gg/${tournament.slug}" target="_blank" class="block mt-1 text-4xl leading-tight font-bold text-white hover:underline">${tournament.name}</a>
                                <p class="mt-2 text-lg text-gray-400">${tournament.city} • ${formattedDate}</p>
                                <p class="mt-1 text-sm text-gray-500">${tournament.venueAddress || ''}</p>
                            </div>
                            <div class="mt-6">
                                <h4 class="font-semibold text-gray-300">Main Events:</h4>
                                <ul class="list-disc list-inside text-gray-400">${eventsList}</ul>
                            </div>
                            <div class="mt-6">
                                <div id="countdown-timer" class="text-2xl text-green-400 font-bold"></div>
                                <div class="flex gap-4 mt-4">
                                    <a href="https://start.gg/${tournament.slug}/register" target="_blank" class="flex-1 text-center ok-blue ok-blue-hover text-white font-semibold px-4 py-2 rounded-lg transition-colors">Register Now</a>
                                    <a href="https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(tournament.venueAddress)}" target="_blank" class="flex-1 text-center bg-gray-700 hover:bg-gray-600 text-white font-semibold px-4 py-2 rounded-lg transition-colors">Get Directions</a>
                                </div>
                            </div>
                        </div>
                        <div class="md:flex-shrink-0">
                            <img class="h-full w-full object-cover" src="${imageUrl}" alt="${tournament.name}">
                        </div>
                    </div>
                `;
                startCountdown(tournament.startAt);
            };

            const renderTournaments = () => {
                const listEl = document.getElementById('tournaments-list');
                listEl.innerHTML = '';
                state.tournaments.forEach((tournament, index) => {
                    const cardContainer = document.createElement('div');
                    cardContainer.className = 'card-container';
                    cardContainer.dataset.id = tournament.id;

                    const flipper = document.createElement('div');
                    flipper.className = 'tournament-card-flipper';
                    
                    const cardFront = document.createElement('div');
                    cardFront.className = 'card-face';
                    const imageUrl = tournament.images.length > 0 ? tournament.images[0].url : `https://placehold.co/600x400/374151/E5E7EB?text=${encodeURIComponent(tournament.name)}`;
                    const startDate = new Date(tournament.startAt * 1000);
                    const formattedDate = startDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                    const registrationOpen = tournament.registrationClosesAt ? new Date(tournament.registrationClosesAt * 1000) > new Date() : true;
                    
                    let winnerHTML = '';
                    if (state.showPast) {
                        const winner = tournament.events?.[0]?.standings?.nodes?.[0];
                        if (winner) {
                            const entrantName = winner.entrant.name;
                            const nameParts = entrantName.split('|').map(part => part.trim());
                            let styledName = (nameParts.length > 1)
                                ? `<span class="font-medium text-gray-400">${nameParts[0]}</span> <span class="font-bold text-gray-100">${nameParts[1]}</span>`
                                : `<span class="font-bold text-gray-100">${entrantName}</span>`;
                            winnerHTML = `<p class="text-gray-300 mb-4"><span class="font-semibold text-gray-200">Winner:</span> ${styledName}</p>`;
                        } else {
                            winnerHTML = `<p class="text-gray-300 mb-4"><span class="font-semibold text-gray-200">Winner:</span> TBD</p>`;
                        }
                    }
                    
                    cardFront.innerHTML = `
                        <div class="image-container">
                            <a href="https://start.gg/${tournament.slug}" target="_blank" rel="noopener noreferrer">
                                <img src="${imageUrl}" alt="${tournament.name}" class="w-full h-48 object-cover banner-image" onerror="this.onerror=null;this.src='https://placehold.co/600x400/374151/E5E7EB?text=Image+Not+Found';">
                            </a>
                        </div>
                        <div class="p-6 flex flex-col flex-grow">
                            <h2 class="text-xl font-bold mb-2 h-14 overflow-hidden" style="color: var(--text-color-primary);">${tournament.name}</h2>
                            <p class="mb-2" style="color: var(--text-color-secondary);"><span class="font-semibold" style="color: var(--text-color-primary);">Date:</span> ${formattedDate}</p>
                            <p class="mb-4" style="color: var(--text-color-secondary);"><span class="font-semibold" style="color: var(--text-color-primary);">Location:</span> ${tournament.city || 'TBA'}</p>
                            <p class="mb-4 text-sm" style="color: var(--text-color-secondary);">Organized by: <span class="font-semibold" style="color: var(--text-color-primary);">${tournament.owner.player.gamerTag || 'N/A'}</span></p>
                            ${winnerHTML}
                            <div class="mt-auto flex items-center justify-between">
                                <a href="https://start.gg/${tournament.slug}/register" target="_blank" class="inline-block ok-blue ok-blue-hover text-white font-semibold px-4 py-2 rounded-lg transition-colors text-sm ${registrationOpen && !state.showPast ? '' : 'hidden'}">Register</a>
                                 <div class="relative flex gap-2">
                                    <button class="calendar-button" title="Add to Calendar">
                                        <svg class="w-6 h-6 text-gray-400 hover:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                                    </button>
                                    <button class="share-button" title="Share Tournament">
                                        <svg class="w-6 h-6 text-gray-400 hover:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12s-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path></svg>
                                    </button>
                                    <div class="share-popover"></div>
                                </div>
                            </div>
                        </div>`;
                    
                    const cardBack = document.createElement('div');
                    cardBack.className = 'card-face card-back';
                    cardBack.innerHTML = `
                        <div>
                            <h3>Entrants</h3>
                            <p>${tournament.participants.pageInfo.total || 'N/A'}</p>
                        </div>
                         <a href="https://start.gg/${tournament.slug}" target="_blank" rel="noopener noreferrer" class="mt-4 inline-block bg-gray-700 hover:bg-gray-600 text-white font-semibold px-4 py-2 rounded-lg transition-colors text-sm">View Details</a>
                    `;

                    flipper.appendChild(cardFront);
                    flipper.appendChild(cardBack);
                    cardContainer.appendChild(flipper);
                    listEl.appendChild(cardContainer);
                    
                    setTimeout(() => { flipper.style.opacity = 1; flipper.classList.add('card-enter-animation'); }, index * 100);
                });
            };

            const updatePagination = (pageInfo) => {
                const paginationEl = document.getElementById('pagination-controls');
                paginationEl.innerHTML = '';
                if (pageInfo && pageInfo.totalPages > 1) {
                    state.totalPages = pageInfo.totalPages;
                    const prevButton = document.createElement('button');
                    prevButton.textContent = 'Previous';
                    prevButton.className = "ok-blue ok-blue-hover text-white font-semibold px-6 py-2 rounded-lg transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed";
                    prevButton.disabled = state.currentPage === 1;
                    prevButton.addEventListener('click', () => { if (state.currentPage > 1) { state.currentPage--; fetchTournaments(); } });
                    
                    const pageIndicator = document.createElement('span');
                    pageIndicator.className = 'text-gray-300 font-medium';
                    pageIndicator.textContent = `Page ${state.currentPage} of ${state.totalPages}`;

                    const nextButton = document.createElement('button');
                    nextButton.textContent = 'Next';
                    nextButton.className = "ok-blue ok-blue-hover text-white font-semibold px-6 py-2 rounded-lg transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed";
                    nextButton.disabled = state.currentPage === state.totalPages;
                    nextButton.addEventListener('click', () => { if (state.currentPage < state.totalPages) { state.currentPage++; fetchTournaments(); } });

                    paginationEl.appendChild(prevButton);
                    paginationEl.appendChild(pageIndicator);
                    paginationEl.appendChild(nextButton);
                }
            };

            const updateStatCounter = (displayed, total) => {
                const statEl = document.getElementById('stat-counter');
                if (state.activeCity) {
                    statEl.textContent = `Showing ${displayed} tournaments in ${state.activeCity}.`;
                } else {
                    statEl.textContent = `Showing ${displayed} of ~${total} total tournaments.`;
                }
            };

            const startCountdown = (startTime) => {
                clearInterval(state.countdownInterval);
                const countdownEl = document.getElementById('countdown-timer');
                if (!countdownEl) return;

                state.countdownInterval = setInterval(() => {
                    const now = new Date().getTime();
                    const distance = (startTime * 1000) - now;

                    if (distance < 0) {
                        countdownEl.innerHTML = "Event has started!";
                        clearInterval(state.countdownInterval);
                        return;
                    }

                    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    countdownEl.innerHTML = `Starts in: ${days}d ${hours}h ${minutes}m ${seconds}s`;
                }, 1000);
            };
            
            const applyTheme = (theme) => {
                const themeToggle = document.getElementById('theme-toggle');
                const sunIcon = `<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5h2.25a.75.75 0 01.75.75zM12 18.75a.75.75 0 01-.75.75v2.25a.75.75 0 011.5 0v-2.25a.75.75 0 01-.75-.75zM4.5 12a.75.75 0 01.75-.75h2.25a.75.75 0 010 1.5H5.25a.75.75 0 01-.75-.75zM17.657 6.343a.75.75 0 010 1.06l-1.591 1.591a.75.75 0 11-1.06-1.06l1.591-1.591a.75.75 0 011.06 0zm-11.314 0a.75.75 0 011.06 0l1.591 1.591a.75.75 0 11-1.06 1.06L6.343 7.404a.75.75 0 010-1.06zm11.314 11.314a.75.75 0 01-1.06 0l-1.591-1.591a.75.75 0 111.06-1.06l1.591 1.591a.75.75 0 010 1.06zM7.404 17.657a.75.75 0 01-1.06 0l-1.591-1.591a.75.75 0 011.06-1.06l1.591 1.591a.75.75 0 010 1.06z"></path></svg>`;
                const moonIcon = `<svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-3.463 1.72-6.57 4.43-8.44a.75.75 0 01.818.162z" clip-rule="evenodd"></path></svg>`;
                
                document.body.classList.toggle('light-theme', theme === 'light');
                themeToggle.innerHTML = theme === 'light' ? moonIcon : sunIcon;
            };

            function createIcsFile(tournament) {
                const startDate = new Date(tournament.startAt * 1000).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
                const endDate = new Date(tournament.endAt * 1000).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
                const url = `https://start.gg/${tournament.slug}`;

                const icsContent = [
                    'BEGIN:VCALENDAR',
                    'VERSION:2.0',
                    'PRODID:-//OklahomaSmash//NONSGML v1.0//EN',
                    'BEGIN:VEVENT',
                    `UID:${tournament.id}@oklahomasmash.com`,
                    `DTSTAMP:${startDate}`,
                    `DTSTART:${startDate}`,
                    `DTEND:${endDate}`,
                    `SUMMARY:${tournament.name}`,
                    `DESCRIPTION:View tournament details at ${url}`,
                    `LOCATION:${tournament.venueAddress || tournament.city}`,
                    'END:VEVENT',
                    'END:VCALENDAR'
                ].join('\r\n');

                const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `${tournament.name}.ics`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            function initializePage() {
                document.getElementById('controls-container').innerHTML = `
                    <div class="relative w-full md:w-auto flex-grow">
                        <input type="text" id="search-box" placeholder="Search by tournament name..." class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 bg-gray-700 text-white border-gray-600 placeholder-gray-400 ok-blue-focus ok-blue-border">
                    </div>
                    <div class="relative w-full md:w-auto">
                        <select id="city-filter" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 bg-gray-700 text-white border-gray-600 ok-blue-focus ok-blue-border">
                            <option value="">All Cities</option>
                            <option value="Oklahoma City">Oklahoma City</option><option value="Tulsa">Tulsa</option><option value="Norman">Norman</option><option value="Lawton">Lawton</option><option value="Broken Arrow">Broken Arrow</option><option value="Edmond">Edmond</option>
                        </select>
                    </div>
                    <label class="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" id="past-events-toggle" class="sr-only peer">
                      <div class="w-11 h-6 bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-indigo-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600"></div>
                      <span class="ml-3 text-sm font-medium text-gray-300">Show Past Tournaments</span>
                    </label>`;
                
                document.querySelector('footer').innerHTML = `
                    <div class="mb-4">
                        <a href="https://discordapp.com/invite/ycZbHSz" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg ok-blue-text hover:text-indigo-400 transition-colors">
                            <img src="images/discord.png" class="w-6 h-6" alt="Discord Icon">
                            Join the Oklahoma Smash Discord
                        </a>
                    </div>
                    <p class="text-gray-400">Powered by the <a href="https://start.gg/dev" target="_blank" class="ok-blue-text hover:underline">start.gg API</a></p>`;

                applyTheme(state.theme);
                
                document.getElementById('theme-toggle').addEventListener('click', () => {
                    state.theme = (state.theme === 'dark') ? 'light' : 'dark';
                    localStorage.setItem('theme', state.theme);
                    applyTheme(state.theme);
                });

                const handleFilterChange = () => {
                    state.searchTerm = document.getElementById('search-box').value;
                    state.activeCity = document.getElementById('city-filter').value;
                    state.showPast = document.getElementById('past-events-toggle').checked;
                    state.currentPage = 1;
                    fetchTournaments();
                };

                document.getElementById('search-box').addEventListener('input', () => { clearTimeout(state.debounceTimer); state.debounceTimer = setTimeout(handleFilterChange, 500); });
                document.getElementById('city-filter').addEventListener('change', handleFilterChange);
                document.getElementById('past-events-toggle').addEventListener('change', handleFilterChange);
                
                document.getElementById('game-tabs').addEventListener('click', (e) => {
                    const tab = e.target.closest('.game-tab');
                    if (tab) {
                        document.getElementById('game-tabs').querySelectorAll('.game-tab').forEach(t => t.classList.remove('active'));
                        tab.classList.add('active');
                        state.activeGameId = parseInt(tab.dataset.gameId, 10);
                        state.currentPage = 1;
                        fetchTournaments();
                        fetchFeaturedTournament();
                    }
                });

                document.getElementById('tournaments-list').addEventListener('click', (e) => {
                    const calendarButton = e.target.closest('.calendar-button');
                    const shareButton = e.target.closest('.share-button');
                    
                    if (calendarButton) {
                        const card = e.target.closest('.card-container');
                        const tournamentId = parseInt(card.dataset.id.replace('tournament-',''), 10);
                        const tournament = state.tournaments.find(t => t.id === tournamentId);
                        if (tournament) createIcsFile(tournament);
                    }

                    if (shareButton) {
                        const popover = shareButton.parentElement.querySelector('.share-popover');
                        const tournamentLink = `https://start.gg/${state.tournaments.find(t => t.id === parseInt(e.target.closest('.card-container').dataset.id.replace('tournament-',''))).slug}`;
                        popover.style.display = popover.style.display === 'flex' ? 'none' : 'flex';
                        popover.innerHTML = `
                            <a href="https://twitter.com/intent/tweet?url=${encodeURIComponent(tournamentLink)}&text=Check out this tournament!" target="_blank" class="text-sm text-gray-300 hover:text-indigo-400">Twitter</a>
                            <a href="https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(tournamentLink)}" target="_blank" class="text-sm text-gray-300 hover:text-indigo-400">Facebook</a>
                            <button class="copy-link-button text-sm text-gray-300 hover:text-indigo-400" data-link="${tournamentLink}">Copy Link</button>
                        `;
                    }
                });

                document.body.addEventListener('click', e => {
                    if(e.target.closest('.share-button')) return;
                    if(!e.target.closest('.share-popover')) {
                        document.querySelectorAll('.share-popover').forEach(p => p.style.display = 'none');
                    }
                    if(e.target.classList.contains('copy-link-button')) {
                        const linkToCopy = e.target.dataset.link;
                        const textArea = document.createElement("textarea");
                        textArea.value = linkToCopy;
                        document.body.appendChild(textArea);
                        textArea.select();
                        try {
                            document.execCommand('copy');
                            e.target.textContent = 'Copied!';
                        } catch (err) {
                            console.error('Fallback: Oops, unable to copy', err);
                            e.target.textContent = 'Error!';
                        }
                        document.body.removeChild(textArea);
                        setTimeout(() => e.target.textContent = 'Copy Link', 2000);
                    }
                });

                const backToTopBtn = document.getElementById('back-to-top-btn');
                window.addEventListener('scroll', () => {
                    if (window.scrollY > 300) {
                        backToTopBtn.classList.add('show');
                    } else {
                        backToTopBtn.classList.remove('show');
                    }
                });
                backToTopBtn.addEventListener('click', () => {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });

                fetchTournaments();
                fetchFeaturedTournament();
            }

            initializePage();
        });
    </script>
</body>
</html>
