<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oklahoma Smash Tournaments</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto Slab', serif;
            /* Using a soft, warm, and reliable background color */
            background-color: #FFF7ED; /* A very light, warm off-white */
        }
        .tournament-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            background-color: white;
        }
        .tournament-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        /* Custom colors for the theme */
        .ok-orange { background-color: #D97706; } /* amber-600 */
        .ok-orange-hover:hover { background-color: #B45309; } /* amber-700 */
        .ok-orange-focus:focus { ring-color: #F59E0B; } /* amber-500 */
        .ok-orange-border { border-color: #D97706; }
        .ok-orange-text { color: #D97706; }
        
        .toggle-checkbox:checked {
            right: 0;
            border-color: #D97706; /* amber-600 */
        }
        .toggle-checkbox:checked + .toggle-label {
            background-color: #D97706; /* amber-600 */
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto px-4 py-8">
        <header class="text-center mb-8">
            <div class="flex justify-center items-center gap-4">
                <!-- Embedded Bison Icon for reliability -->
                <svg class="h-12 w-12 text-gray-700" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18.28 7.503c-1.135-1.13-2.203-2.28-3.438-2.28-1.56 0-2.342 1.44-2.342 1.44s-.782-1.44-2.343-1.44c-1.234 0-2.303 1.15-3.437 2.28C5.62 8.598 4.5 10.14 4.5 12.06v.058c0 .93.262 1.81.782 2.593l.39.585s.39.584 1.17 1.168c.782.585 1.755 1.17 2.926 1.17h5.2c1.17 0 2.144-.585 2.926-1.17.78-.584 1.17-1.168 1.17-1.168l.39-.585c.52-.782.782-1.662.782-2.593v-.058c0-1.92-1.118-3.462-2.198-4.557zM15 9.18v2.925h-2.34V9.18H15zm-4.68 0v2.925H8.01V9.18h2.31zM18 14.82c-.78.585-1.56 1.17-2.34 1.17h-7.32c-.78 0-1.56-.585-2.34-1.17-.52-.39-.78-.78-.78-1.17s.26-1.17.78-1.56c.975-.78 1.95-1.56 1.95-2.73v-.06c0-1.17.78-2.34 1.95-2.34.78 0 1.17.78 1.17 1.17v3.51h2.34V8.01c0-.39.39-1.17 1.17-1.17 1.17 0 1.95 1.17 1.95 2.34v.06c0 1.17.975 1.95 1.95 2.73.52.39.78.78.78 1.56s-.26.78-.78 1.17z"/>
                </svg>
                <h1 class="text-4xl md:text-5xl font-bold text-gray-900">Oklahoma Smash Tournaments</h1>
            </div>
            <p class="text-lg text-gray-600 mt-2">Find local tournaments for your favorite games.</p>
        </header>

        <!-- Controls: Search, Toggle -->
        <div class="mb-8 p-4 bg-white/90 backdrop-blur-sm rounded-lg shadow-md flex flex-col md:flex-row gap-4 items-center justify-center">
            <!-- Search Input -->
            <div class="relative w-full md:w-1/2">
                <input type="text" id="search-box" placeholder="Search by tournament name..." class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 ok-orange-focus ok-orange-border">
            </div>
            <!-- Toggle for Past Events -->
            <div class="flex items-center justify-center">
                <label for="past-events-toggle" class="mr-3 text-gray-700">Show Past Tournaments</label>
                <div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
                    <input type="checkbox" name="toggle" id="past-events-toggle" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
                    <label for="past-events-toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
                </div>
            </div>
        </div>

        <div id="loading" class="text-center">
            <p class="text-lg">Loading tournaments...</p>
        </div>

        <div id="tournaments-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 min-h-[400px]">
            <!-- Tournament cards will be inserted here -->
        </div>

        <div id="error" class="hidden text-center text-red-500 mt-8">
            <!-- Error messages will be shown here -->
        </div>
        
        <!-- Pagination -->
        <div id="pagination-controls" class="flex justify-center items-center mt-12 gap-4">
            <button id="prev-button" class="ok-orange ok-orange-hover text-white font-semibold px-6 py-2 rounded-lg transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed">Previous</button>
            <span id="page-indicator" class="text-gray-700 font-medium">Page 1</span>
            <button id="next-button" class="ok-orange ok-orange-hover text-white font-semibold px-6 py-2 rounded-lg transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed">Next</button>
        </div>

    </div>

    <footer class="text-center py-6 mt-12 bg-white/90 backdrop-blur-sm border-t">
        <p class="text-gray-600">Powered by the <a href="https://start.gg/dev" target="_blank" class="ok-orange-text hover:underline">start.gg API</a></p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DOM Elements ---
            const tournamentsList = document.getElementById('tournaments-list');
            const loading = document.getElementById('loading');
            const error = document.getElementById('error');
            const searchBox = document.getElementById('search-box');
            const pastEventsToggle = document.getElementById('past-events-toggle');
            const prevButton = document.getElementById('prev-button');
            const nextButton = document.getElementById('next-button');
            const pageIndicator = document.getElementById('page-indicator');
            const paginationControls = document.getElementById('pagination-controls');

            // --- API & State ---
            const apiKey = 'd962f418dd0489a80b44305d874f673d';
            let currentPage = 1;
            let totalPages = 1;
            let searchTerm = '';
            let showPast = false;
            let debounceTimer;

            // --- GraphQL Query ---
            const graphqlQuery = `
                query TournamentsByState($perPage: Int!, $page: Int!, $filter: TournamentPageFilter) {
                  tournaments(query: {
                    perPage: $perPage
                    page: $page
                    filter: $filter
                  }) {
                    pageInfo {
                      totalPages
                      page
                    }
                    nodes {
                      id
                      name
                      slug
                      startAt
                      city
                      images {
                        url
                      }
                      events(filter: { videogameId: [1386] }) {
                        id
                        name
                        standings(query: { perPage: 1, page: 1 }) {
                          nodes {
                            placement
                            entrant {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
            `;

            // --- Main Fetch Function ---
            const fetchTournaments = async () => {
                loading.style.display = 'block';
                tournamentsList.innerHTML = '';
                error.classList.add('hidden');
                paginationControls.style.visibility = 'hidden';

                const timestamp = Math.floor(Date.now() / 1000);
                let filter = {
                    addrState: "OK",
                    videogameIds: [1386]
                };

                if (searchTerm) {
                    filter.name = searchTerm;
                }

                if (showPast) {
                    filter.beforeDate = timestamp;
                } else {
                    filter.afterDate = timestamp;
                }

                const variables = {
                    perPage: 12,
                    page: currentPage,
                    filter: filter
                };

                try {
                    const response = await fetch('https://api.start.gg/gql/alpha', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${apiKey}`,
                        },
                        body: JSON.stringify({
                            query: graphqlQuery,
                            variables: variables
                        }),
                    });

                    const data = await response.json();
                    loading.style.display = 'none';

                    if (data.errors) {
                        throw new Error(data.errors[0].message);
                    }
                    
                    const tournaments = data.data.tournaments.nodes;
                    const pageInfo = data.data.tournaments.pageInfo;
                    totalPages = pageInfo.totalPages || 1;

                    if (tournaments.length === 0) {
                        tournamentsList.innerHTML = `<p class="text-center col-span-full text-gray-500">No tournaments found with the current filters.</p>`;
                    } else {
                        renderTournaments(tournaments);
                    }
                    updatePagination();

                } catch (err) {
                    console.error('Fetch error:', err);
                    loading.style.display = 'none';
                    error.classList.remove('hidden');
                    error.textContent = `Error: ${err.message}`;
                }
            };
            
            // --- Render Functions ---
            const renderTournaments = (tournaments) => {
                tournamentsList.innerHTML = ''; 
                tournaments.forEach(tournament => {
                    const tournamentCard = document.createElement('div');
                    tournamentCard.className = 'tournament-card rounded-lg shadow-md overflow-hidden';
                    const imageUrl = tournament.images.length > 0 ? tournament.images[0].url : `https://placehold.co/600x400/E2E8F0/4A5568?text=${encodeURIComponent(tournament.name)}`;
                    const startDate = new Date(tournament.startAt * 1000);
                    const formattedDate = startDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

                    let winnerHTML = '';
                    if (showPast) {
                        const winner = tournament.events?.[0]?.standings?.nodes?.[0];
                        if (winner) {
                            const entrantName = winner.entrant.name;
                            const nameParts = entrantName.split('|').map(part => part.trim());
                            let styledName = '';

                            if (nameParts.length > 1) {
                                styledName = `<span class="font-medium text-gray-500">${nameParts[0]}</span> <span class="font-bold text-gray-800">${nameParts[1]}</span>`;
                            } else {
                                styledName = `<span class="font-bold text-gray-800">${entrantName}</span>`;
                            }
                            winnerHTML = `<p class="text-gray-600 mb-4"><span class="font-semibold">Winner:</span> ${styledName}</p>`;
                        } else {
                            winnerHTML = `<p class="text-gray-600 mb-4"><span class="font-semibold">Winner:</span> TBD</p>`;
                        }
                    }

                    tournamentCard.innerHTML = `
                        <a href="https://start.gg/${tournament.slug}" target="_blank" rel="noopener noreferrer">
                            <img src="${imageUrl}" alt="${tournament.name}" class="w-full h-48 object-cover" onerror="this.onerror=null;this.src='https://placehold.co/600x400/E2E8F0/4A5568?text=Image+Not+Found';">
                        </a>
                        <div class="p-6">
                            <h2 class="text-xl font-bold mb-2 h-14 overflow-hidden">${tournament.name}</h2>
                            <p class="text-gray-600 mb-2"><span class="font-semibold">Date:</span> ${formattedDate}</p>
                            <p class="text-gray-600 mb-4"><span class="font-semibold">Location:</span> ${tournament.city || 'TBA'}</p>
                            ${winnerHTML}
                            <a href="https://start.gg/${tournament.slug}" target="_blank" rel="noopener noreferrer" class="inline-block ok-orange ok-orange-hover text-white font-semibold px-4 py-2 rounded-lg transition-colors">
                                View Tournament
                            </a>
                        </div>
                    `;
                    tournamentsList.appendChild(tournamentCard);
                });
            };

            const updatePagination = () => {
                if (totalPages > 1) {
                    paginationControls.style.visibility = 'visible';
                    pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;
                    prevButton.disabled = currentPage === 1;
                    nextButton.disabled = currentPage === totalPages;
                } else {
                    paginationControls.style.visibility = 'hidden';
                }
            };

            // --- Event Listeners ---
            searchBox.addEventListener('input', (e) => {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    searchTerm = e.target.value;
                    currentPage = 1;
                    fetchTournaments();
                }, 500);
            });

            pastEventsToggle.addEventListener('change', (e) => {
                showPast = e.target.checked;
                currentPage = 1;
                fetchTournaments();
            });

            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    fetchTournaments();
                }
            });

            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    fetchTournaments();
                }
            });

            // --- Initial Load ---
            fetchTournaments();
        });
    </script>

</body>
</html>
